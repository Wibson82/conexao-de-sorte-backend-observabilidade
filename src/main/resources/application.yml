# ============================================================================
# üìä OBSERVABILITY MICROSERVICE CONFIGURATION
# Spring Boot 3.5.5 + Java 24
# ============================================================================
spring:
  application:
    name: observability-microservice
    
  profiles:
    default: prod
    
  jackson:
    time-zone: America/Sao_Paulo
    locale: pt_BR
    
  main:
    allow-bean-definition-overriding: true
    
  # Azure Key Vault (padr√£o simplificado)
  cloud:
    azure:
      keyvault:
        secret:
          enabled: ${AZURE_KEYVAULT_ENABLED:true}
          endpoint: ${AZURE_KEYVAULT_ENDPOINT:}
      profile:
        tenant-id: ${AZURE_TENANT_ID:}
        subscription-id: ${AZURE_SUBSCRIPTION_ID:}
      credential:
        client-id: ${AZURE_CLIENT_ID:}
        managed-identity-enabled: false

  # OAuth2 Resource Server - JWT validation via JWKS
  security:
    oauth2:
      resourceserver:
        jwt:
          # Adota segredos padr√£o do projeto com fallback para vari√°veis legadas
          jwk-set-uri: ${conexao-de-sorte-jwt-jwks-uri:${JWT_JWKS_URI:http://localhost:8081/.well-known/jwks.json}}
          issuer-uri: ${conexao-de-sorte-jwt-issuer:${JWT_ISSUER:https://auth.conexaodesorte.com}}

  # Redis Configuration for metrics cache
  data:
    redis:
      host: ${conexao-de-sorte-redis-host:localhost}
      port: ${conexao-de-sorte-redis-port:6379}
      password: ${conexao-de-sorte-redis-password:}
      database: ${conexao-de-sorte-redis-database:7}  # DB 7 para observabilidade
      timeout: 3s
      connect-timeout: 10s
      client-type: lettuce
      lettuce:
        pool:
          enabled: true
          max-active: 20
          max-idle: 8
          min-idle: 4
          max-wait: 5s
          time-between-eviction-runs: 30s

  # Cache Configuration for metrics
  cache:
    type: redis
    cache-names:
      - metrics-cache
      - business-metrics
      - health-status
      - service-status
    redis:
      time-to-live: 1m  # TTL curto para m√©tricas em tempo real
      cache-null-values: false
      key-prefix: "observability:"
      use-key-prefix: true

server:
  port: ${conexao-de-sorte-server-port:8089}
  shutdown: graceful
  
  # SSL/TLS Configuration
  ssl:
    # Preferencialmente usa segredo padronizado; mant√©m compat com SSL_ENABLED
    enabled: ${conexao-de-sorte-ssl-enabled:${SSL_ENABLED:false}}

# ============================================================================
# üìä MANAGEMENT & OBSERVABILITY - CONFIGURA√á√ÉO ESPEC√çFICA
# ============================================================================
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"  # Expor todos os endpoints para observabilidade
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
    info:
      enabled: true
    env:
      enabled: true
    configprops:
      enabled: true
    beans:
      enabled: true
    mappings:
      enabled: true
    scheduledtasks:
      enabled: true
    
  # Metrics Configuration
  metrics:
    enabled: true
    export:
      prometheus:
        enabled: true
        step: 10s
        descriptions: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99, 0.999
        spring.data.redis.operations: 0.5, 0.9, 0.95, 0.99
      percentiles-histogram:
        http.server.requests: true
        spring.data.redis.operations: true
      maximum-expected-value:
        http.server.requests: 5s
      minimum-expected-value:
        http.server.requests: 1ms
    tags:
      service: observability-microservice
      environment: ${ENVIRONMENT:prod}
      
  # Health Configuration
  health:
    redis:
      enabled: true
    disk-space:
      enabled: true
    db:
      enabled: false  # N√£o usa banco de dados pr√≥prio
    
  # Tracing Configuration
  tracing:
    sampling:
      probability: 1.0  # 100% sampling para observabilidade
      
  # Info Configuration
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

# ============================================================================
# üîç LOGGING CONFIGURATION - OBSERVABILIDADE
# ============================================================================
logging:
  level:
    root: INFO
    br.tec.facilitaservicos.observability: DEBUG
    io.micrometer: DEBUG
    org.springframework.boot.actuator: DEBUG
    org.springframework.web: INFO
    org.springframework.security: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %highlight(%5p) - [%15.15t] - %-40.40logger{36} : %m%n%ex"
    file: "%d{yyyy-MM-dd HH:mm:ss} - %5p - [%t] - %logger{36} : %m%n%ex"
  file:
    name: ${LOG_FILE:/var/log/observability/observability-microservice.log}

# ============================================================================
# üîí SECURITY CONFIGURATION
# ============================================================================
security:
  jwt:
    enabled: true

# ============================================================================
# üö® RESILIENCE4J CONFIGURATION
# ============================================================================
resilience4j:
  circuitbreaker:
    instances:
      default:
        sliding-window-size: 100
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
  
  retry:
    instances:
      default:
        max-attempts: 3
        wait-duration: 1000ms
        
  timelimiter:
    instances:
      default:
        timeout-duration: 10s

# ============================================================================
# üìä BUSINESS METRICS CONFIGURATION - ESPEC√çFICO OBSERVABILITY
# ============================================================================
observability:
  metrics:
    collection:
      enabled: true
      interval: 30s
    business:
      enabled: true
      categories:
        - authentication
        - notifications
        - results
        - chat
        - payments
        - users
    alerts:
      enabled: true
      thresholds:
        error-rate: 0.05  # 5%
        response-time: 2000  # 2s
        cpu-usage: 80  # 80%
        memory-usage: 85  # 85%
        
  health-checks:
    external-services:
      enabled: true
      endpoints:
        - name: auth-service
          url: http://auth-microservice:8081/actuator/health
        - name: notifications-service
          url: http://notifications-microservice:8082/actuator/health
        - name: results-service
          url: http://results-microservice:8083/actuator/health
        - name: scheduler-service
          url: http://scheduler-microservice:8084/actuator/health
        - name: chat-service
          url: http://chat-microservice:8079/actuator/health
        - name: crypto-service
          url: http://crypto-microservice:8088/actuator/health

---
# ============================================================================
# üåü PROFILE: PRODUCTION
# ============================================================================
spring:
  config:
    activate:
      on-profile: prod

server:
  port: 8089

logging:
  level:
    root: INFO
    br.tec.facilitaservicos.observability: INFO

observability:
  metrics:
    collection:
      interval: 60s  # Menos frequente em prod
  alerts:
    enabled: true
